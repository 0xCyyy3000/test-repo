name: Auto Assign PRs to Project
on:
  issues:
    types: [ opened ]
  pull_request:
    types: [ opened ]
    
# github-script: https://github.com/actions/github-script
# -> points to github rest (octokit) reference doc

# github PAT: https://github.com/settings/tokens
# must have full repo access

# FIXME how can I prevent a user from creating a PR and stealing my token?
# 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    
# curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ghp_..." https://api.github.com/projects/1/columns?owner=zpqrtbnk&repo=test-repo
# curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ghp_..." https://api.github.com/projects/1/columns?owner=zpqrtbnk-alt&repo=test-repo-alt
    
jobs:
  assign:
    runs-on: ubuntu-latest
    name: Assign
    steps:
    - name: Assign
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.MY_GITHUB_TOKEN_TESTREPO }}
        script: |
            //const project_name = 'The API Team Board'
            //const column_name = 'Drafting'
            
            const project_name = 'test-project'
            const column_name = 'To do'
            
            function firstOrDefault(items, predicate) {
                for (const item of items) {
                    if (predicate(item)) {
                        return item
                    }
                }
                return null
            }
            
            // find the project
            console.log('find project...')
            const projects = await github.projects.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo
            })
            console.log(projects)
            console.log(`retrieved ${projects.length} projects.`)
            const project = firstOrDefault(projects.data, (x) => x.name === project_name)
            //var project = null
            //for (const p of projects) {
            //    if (p.name === project_name) {
            //        project = p
            //    }
            //}
            if (project === null) {
                core.setFailed(`Failed to find project "${project_name}".`)
                return
            }
            else {
                console.log(`project id: ${project.id}`)
            }

            // find the column
            const columns = await github.projects.listColumns({
                project_id: project.id
            })
            var column = null
            for (const c of columns.data) {
                if (c.name === column_name) {
                    column = c
                }
            }
            if (column === null) {
                core.setFailed(`Failed to find column "${column_name}" in project ${project.name}.`)
                return
            }
            
            var content_type = null
            if (github.event.name === 'issue') {
                content_type = 'Issue'
            }
            if (github.event.name === 'pull_request') {
                content_type = 'PullRequest'
            }
            if (content_type === null) {
                core.setFailed(`Unexpected event name "${github.event.name}".`)
            }
            
            await github.projects.createCard({
                column_id: column.id,
                //note:,
                content_id: context.issue.number,
                content_type: content_type
            })
            
            /*
            await github.issues.update({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                
            })
            */